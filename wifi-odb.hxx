// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef WIFI_ODB_HXX
#define WIFI_ODB_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/mysql/gregorian-traits.hxx>
#include <odb/boost/date-time/mysql/posix-time-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
#include <odb/boost/uuid/mysql/uuid-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "wifi.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // WifiData
  //
  template <>
  struct class_traits< ::WifiData >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::WifiData >
  {
    public:
    typedef ::WifiData object_type;
    typedef ::boost::shared_ptr< ::WifiData > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // WifiSample
  //
  template <>
  struct class_traits< ::WifiSample >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::WifiSample >
  {
    public:
    typedef ::WifiSample object_type;
    typedef ::boost::shared_ptr< ::WifiSample > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // WifiRaw
  //
  template <>
  struct class_traits< ::WifiRaw >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::WifiRaw >
  {
    public:
    typedef ::WifiRaw object_type;
    typedef ::boost::shared_ptr< ::WifiRaw > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // WifiQuery
  //
  template <>
  struct class_traits< ::WifiQuery >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::WifiQuery >
  {
    public:
    typedef ::WifiQuery object_type;
    typedef ::boost::shared_ptr< ::WifiQuery > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // wifi_view_pos
  //
  template <>
  struct class_traits< ::wifi_view_pos >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::wifi_view_pos >
  {
    public:
    typedef ::wifi_view_pos view_type;
    typedef ::boost::shared_ptr< ::wifi_view_pos > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // wifi_view_device
  //
  template <>
  struct class_traits< ::wifi_view_device >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::wifi_view_device >
  {
    public:
    typedef ::wifi_view_device view_type;
    typedef ::boost::shared_ptr< ::wifi_view_device > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // wifi_view_identification
  //
  template <>
  struct class_traits< ::wifi_view_identification >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::wifi_view_identification >
  {
    public:
    typedef ::wifi_view_identification view_type;
    typedef ::boost::shared_ptr< ::wifi_view_identification > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // WifiData
  //
  template <typename A>
  struct query_columns< ::WifiData, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // pos
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pos_type_;

    static const pos_type_ pos;
  };

  template <typename A>
  const typename query_columns< ::WifiData, id_mysql, A >::id_type_
  query_columns< ::WifiData, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::WifiData, id_mysql, A >::pos_type_
  query_columns< ::WifiData, id_mysql, A >::
  pos (A::table_name, "`pos`", 0);

  template <typename A>
  struct pointer_query_columns< ::WifiData, id_mysql, A >:
    query_columns< ::WifiData, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::WifiData, id_mysql >:
    public access::object_traits< ::WifiData >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // pos_
      //
      details::buffer pos_value;
      unsigned long pos_size;
      my_bool pos_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // wmap_
    //
    struct wmap_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::WifiData::WifiMap container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< wmap_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        details::buffer key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        double value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::WifiData, id_common >:
    public access::object_traits_impl< ::WifiData, id_mysql >
  {
  };

  // WifiSample
  //
  template <typename A>
  struct query_columns< ::WifiSample, id_mysql, A >
  {
    // raw_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    raw_id_type_;

    static const raw_id_type_ raw_id;
  };

  template <typename A>
  const typename query_columns< ::WifiSample, id_mysql, A >::raw_id_type_
  query_columns< ::WifiSample, id_mysql, A >::
  raw_id (A::table_name, "`raw_id`", 0);

  template <typename A>
  struct pointer_query_columns< ::WifiSample, id_mysql, A >:
    query_columns< ::WifiSample, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::WifiSample, id_mysql >:
    public access::object_traits< ::WifiSample >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // raw_id_
      //
      unsigned long long raw_id_value;
      my_bool raw_id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::WifiSample, id_common >:
    public access::object_traits_impl< ::WifiSample, id_mysql >
  {
  };

  // WifiRaw
  //
  template <typename A>
  struct query_columns< ::WifiRaw, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // identification
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    identification_type_;

    static const identification_type_ identification;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // device
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    device_type_;

    static const device_type_ device;

    // nowtime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    nowtime_type_;

    static const nowtime_type_ nowtime;

    // intensity
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    intensity_type_;

    static const intensity_type_ intensity;

    // pos
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pos_type_;

    static const pos_type_ pos;
  };

  template <typename A>
  const typename query_columns< ::WifiRaw, id_mysql, A >::id_type_
  query_columns< ::WifiRaw, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::WifiRaw, id_mysql, A >::identification_type_
  query_columns< ::WifiRaw, id_mysql, A >::
  identification (A::table_name, "`identification`", 0);

  template <typename A>
  const typename query_columns< ::WifiRaw, id_mysql, A >::name_type_
  query_columns< ::WifiRaw, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::WifiRaw, id_mysql, A >::device_type_
  query_columns< ::WifiRaw, id_mysql, A >::
  device (A::table_name, "`device`", 0);

  template <typename A>
  const typename query_columns< ::WifiRaw, id_mysql, A >::nowtime_type_
  query_columns< ::WifiRaw, id_mysql, A >::
  nowtime (A::table_name, "`nowtime`", 0);

  template <typename A>
  const typename query_columns< ::WifiRaw, id_mysql, A >::intensity_type_
  query_columns< ::WifiRaw, id_mysql, A >::
  intensity (A::table_name, "`intensity`", 0);

  template <typename A>
  const typename query_columns< ::WifiRaw, id_mysql, A >::pos_type_
  query_columns< ::WifiRaw, id_mysql, A >::
  pos (A::table_name, "`pos`", 0);

  template <typename A>
  struct pointer_query_columns< ::WifiRaw, id_mysql, A >:
    query_columns< ::WifiRaw, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::WifiRaw, id_mysql >:
    public access::object_traits< ::WifiRaw >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // identification_
      //
      details::buffer identification_value;
      unsigned long identification_size;
      my_bool identification_null;

      // name_
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // device_
      //
      details::buffer device_value;
      unsigned long device_size;
      my_bool device_null;

      // nowtime_
      //
      details::buffer nowtime_value;
      unsigned long nowtime_size;
      my_bool nowtime_null;

      // intensity_
      //
      int intensity_value;
      my_bool intensity_null;

      // pos_
      //
      details::buffer pos_value;
      unsigned long pos_size;
      my_bool pos_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::WifiRaw, id_common >:
    public access::object_traits_impl< ::WifiRaw, id_mysql >
  {
  };

  // WifiQuery
  //
  template <typename A>
  struct query_columns< ::WifiQuery, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // pos
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pos_type_;

    static const pos_type_ pos;
  };

  template <typename A>
  const typename query_columns< ::WifiQuery, id_mysql, A >::id_type_
  query_columns< ::WifiQuery, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::WifiQuery, id_mysql, A >::pos_type_
  query_columns< ::WifiQuery, id_mysql, A >::
  pos (A::table_name, "`pos`", 0);

  template <typename A>
  struct pointer_query_columns< ::WifiQuery, id_mysql, A >:
    query_columns< ::WifiQuery, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::WifiQuery, id_mysql >:
    public access::object_traits< ::WifiQuery >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // pos_
      //
      details::buffer pos_value;
      unsigned long pos_size;
      my_bool pos_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // wmap_
    //
    struct wmap_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::WifiQuery::QueryMap container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< wmap_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        details::buffer key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        double value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::WifiQuery, id_common >:
    public access::object_traits_impl< ::WifiQuery, id_mysql >
  {
  };

  // wifi_view_pos
  //
  template <>
  class access::view_traits_impl< ::wifi_view_pos, id_mysql >:
    public access::view_traits< ::wifi_view_pos >
  {
    public:
    struct image_type
    {
      // pos
      //
      details::buffer pos_value;
      unsigned long pos_size;
      my_bool pos_null;

      std::size_t version;
    };

    typedef mysql::view_statements<view_type> statements_type;

    typedef mysql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::wifi_view_pos, id_common >:
    public access::view_traits_impl< ::wifi_view_pos, id_mysql >
  {
  };

  // wifi_view_device
  //
  template <>
  class access::view_traits_impl< ::wifi_view_device, id_mysql >:
    public access::view_traits< ::wifi_view_device >
  {
    public:
    struct image_type
    {
      // device
      //
      details::buffer device_value;
      unsigned long device_size;
      my_bool device_null;

      std::size_t version;
    };

    typedef mysql::view_statements<view_type> statements_type;

    typedef mysql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::wifi_view_device, id_common >:
    public access::view_traits_impl< ::wifi_view_device, id_mysql >
  {
  };

  // wifi_view_identification
  //
  template <>
  class access::view_traits_impl< ::wifi_view_identification, id_mysql >:
    public access::view_traits< ::wifi_view_identification >
  {
    public:
    struct image_type
    {
      // identification
      //
      details::buffer identification_value;
      unsigned long identification_size;
      my_bool identification_null;

      std::size_t version;
    };

    typedef mysql::view_statements<view_type> statements_type;

    typedef mysql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::wifi_view_identification, id_common >:
    public access::view_traits_impl< ::wifi_view_identification, id_mysql >
  {
  };

  // WifiData
  //
  // WifiSample
  //
  // WifiRaw
  //
  // WifiQuery
  //
  // wifi_view_pos
  //
  struct access::view_traits_impl< ::wifi_view_pos, id_mysql >::query_columns:
    odb::pointer_query_columns<
      ::WifiRaw,
      id_mysql,
      odb::access::object_traits_impl< ::WifiRaw, id_mysql > >
  {
  };

  // wifi_view_device
  //
  struct access::view_traits_impl< ::wifi_view_device, id_mysql >::query_columns:
    odb::pointer_query_columns<
      ::WifiRaw,
      id_mysql,
      odb::access::object_traits_impl< ::WifiRaw, id_mysql > >
  {
  };

  // wifi_view_identification
  //
  struct access::view_traits_impl< ::wifi_view_identification, id_mysql >::query_columns:
    odb::pointer_query_columns<
      ::WifiRaw,
      id_mysql,
      odb::access::object_traits_impl< ::WifiRaw, id_mysql > >
  {
  };
}

#include "wifi-odb.ixx"

#include <odb/post.hxx>

#endif // WIFI_ODB_HXX
